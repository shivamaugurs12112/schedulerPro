#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScheduleSample.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ScheduleData")]
	public partial class ScheduleDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertScheduleEventData(ScheduleEventData instance);
    partial void UpdateScheduleEventData(ScheduleEventData instance);
    partial void DeleteScheduleEventData(ScheduleEventData instance);
    #endregion
		
		public ScheduleDataDataContext() : 
				base(global::ScheduleSample.Properties.Settings.Default.ScheduleDataConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ScheduleDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScheduleDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScheduleDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScheduleDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ScheduleEventData> ScheduleEventDatas
		{
			get
			{
				return this.GetTable<ScheduleEventData>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScheduleEventData")]
	public partial class ScheduleEventData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Subject;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private string _StartTimezone;
		
		private string _EndTimezone;
		
		private System.Nullable<bool> _IsAllDay;
		
		private string _RecurrenceRule;
		
		private System.Nullable<int> _RecurrenceID;
		
		private string _RecurrenceException;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnStartTimezoneChanging(string value);
    partial void OnStartTimezoneChanged();
    partial void OnEndTimezoneChanging(string value);
    partial void OnEndTimezoneChanged();
    partial void OnIsAllDayChanging(System.Nullable<bool> value);
    partial void OnIsAllDayChanged();
    partial void OnRecurrenceRuleChanging(string value);
    partial void OnRecurrenceRuleChanged();
    partial void OnRecurrenceIDChanging(System.Nullable<int> value);
    partial void OnRecurrenceIDChanged();
    partial void OnRecurrenceExceptionChanging(string value);
    partial void OnRecurrenceExceptionChanged();
    #endregion
		
		public ScheduleEventData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(MAX)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTimezone", DbType="NVarChar(MAX)")]
		public string StartTimezone
		{
			get
			{
				return this._StartTimezone;
			}
			set
			{
				if ((this._StartTimezone != value))
				{
					this.OnStartTimezoneChanging(value);
					this.SendPropertyChanging();
					this._StartTimezone = value;
					this.SendPropertyChanged("StartTimezone");
					this.OnStartTimezoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTimezone", DbType="NVarChar(MAX)")]
		public string EndTimezone
		{
			get
			{
				return this._EndTimezone;
			}
			set
			{
				if ((this._EndTimezone != value))
				{
					this.OnEndTimezoneChanging(value);
					this.SendPropertyChanging();
					this._EndTimezone = value;
					this.SendPropertyChanged("EndTimezone");
					this.OnEndTimezoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAllDay", DbType="Bit")]
		public System.Nullable<bool> IsAllDay
		{
			get
			{
				return this._IsAllDay;
			}
			set
			{
				if ((this._IsAllDay != value))
				{
					this.OnIsAllDayChanging(value);
					this.SendPropertyChanging();
					this._IsAllDay = value;
					this.SendPropertyChanged("IsAllDay");
					this.OnIsAllDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecurrenceRule", DbType="NVarChar(MAX)")]
		public string RecurrenceRule
		{
			get
			{
				return this._RecurrenceRule;
			}
			set
			{
				if ((this._RecurrenceRule != value))
				{
					this.OnRecurrenceRuleChanging(value);
					this.SendPropertyChanging();
					this._RecurrenceRule = value;
					this.SendPropertyChanged("RecurrenceRule");
					this.OnRecurrenceRuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecurrenceID", DbType="Int")]
		public System.Nullable<int> RecurrenceID
		{
			get
			{
				return this._RecurrenceID;
			}
			set
			{
				if ((this._RecurrenceID != value))
				{
					this.OnRecurrenceIDChanging(value);
					this.SendPropertyChanging();
					this._RecurrenceID = value;
					this.SendPropertyChanged("RecurrenceID");
					this.OnRecurrenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecurrenceException", DbType="NVarChar(MAX)")]
		public string RecurrenceException
		{
			get
			{
				return this._RecurrenceException;
			}
			set
			{
				if ((this._RecurrenceException != value))
				{
					this.OnRecurrenceExceptionChanging(value);
					this.SendPropertyChanging();
					this._RecurrenceException = value;
					this.SendPropertyChanged("RecurrenceException");
					this.OnRecurrenceExceptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
